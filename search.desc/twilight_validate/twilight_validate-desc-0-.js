searchState.loadedDescShard("twilight_validate", 0, "twilight-validate\nConstants, error types, and functions for validating …\nConstants, error types, and functions for validating …\nConstants, error types, and functions for validating …\nConstants, error types, and functions for validating <code>Embed</code>…\nConstants, error types, and functions for validating …\nContains all other input validation functions.\nConstants, error types, and functions for validating …\nThe bitrate is less than 8000.\nNumber of messages being deleted in bulk is invalid.\nMinimum bitrate of a voice channel.\nMaximum number of bulk messages that can be deleted.\nMinimum number of bulk messages that can be deleted.\nMaximum length of a forum channel’s topic.\nMaximum length of a channel’s name.\nMinimum length of a channel’s name.\nMaximum length of a channel’s rate limit per user.\nMaximum number of members that can be returned in a thread.\nMinimum number of members that can be returned in a thread.\nMaximum length of a channel’s topic.\nMaximum user limit of an audio channel.\nReturned when the channel can not be updated as configured.\nType of <code>ChannelValidationError</code> that occurred.\nThe length of the topic is more than 4096 UTF-16 …\nThe length of the name is either fewer than 1 UTF-16 …\nThe seconds of the rate limit per user is more than 21600.\nThe number of members to return is less than 1 or greater …\nThe length of the topic is more than 1024 UTF-16 …\nProvided type was not a thread.\nUser limit is greater than 99.\nEnsure a channel’s bitrate is collect.\nEnsure the number of messages to delete in bulk is correct.\nEnsure a forum channel’s topic’s length is correct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nEnsure a channel is a thread.\nImmutable reference to the type of error that occurred.\nEnsure a channel’s name’s length is correct.\nEnsure a channel’s rate limit per user is correct.\nEnsure the limit set for the number of thread members to …\nEnsure a channel’s topic’s length is correct.\nEnsure a channel’s user limit is correct.\nProvided type.\nProvided ratelimit is invalid.\nMaximum number of choices an option can have.\nConstant instance of a <code>CommandValidationError</code> with type …\nThe maximum combined command length in codepoints.\nCombined values of the command are larger than …\nError created when a <code>Command</code> is invalid.\nType of <code>CommandValidationError</code> that occurred.\nToo many commands have been provided.\nMaximum length of a command’s description.\nMinimum length of a command’s description.\nCommand description is invalid.\nCommand description must be a empty string.\nMaximum number of commands an application may have in an …\nMaximum number of permission overwrites an application may …\nMaximum length of a command’s name.\nMinimum length of a command’s name.\nCommand name contain an invalid character.\nCommand name length is invalid.\nMaximum amount of options a command may have.\nMaximum length of an option choice name.\nMinimum length of an option choice name.\nMaximum length of an option choice string value.\nMinimum length of an option choice string value.\nMaximum length of a command’s description.\nMinimum length of a command’s description.\nMaximum length of a command’s name.\nMinimum length of a command’s name.\nCommand option choice name length is invalid.\nString command option choice value length is invalid.\nCommand option description is invalid.\nCommand option name contain an invalid character.\nCommand option name length is invalid.\nCommand option name is non-unique.\nCommand options count invalid.\nRequired command options have to be passed before optional …\nMore than 10 permission overwrites were set.\nValidate the name of a <code>ChatInput</code> command.\nValidate a single <code>CommandOptionChoice</code>.\nValidate a single name localization in a …\nValidate a <code>Command</code>.\nCalculate the total character count of a command.\nValidate the description of a <code>Command</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nValidate the number of guild command permission overwrites.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nImmutable reference to the type of error that occurred.\nValidate the name of a <code>User</code> or <code>Message</code> command.\nValidate a single <code>CommandOption</code>.\nCalculate the total character count of a command option.\nValidate the name of a <code>CommandOption</code>.\nCreate an error of type <code>OptionNameNotUnique</code> with a …\nCreate an error of type <code>OptionsRequiredFirst</code> with a …\nValidate a list of command options for count, order, and …\nInvalid character.\nInvalid character.\nProvided number of codepoints.\nIndex of the option that failed validation.\nIndex of the option that has a duplicated name.\nMaximum number of <code>Component</code>s allowed inside an <code>ActionRow</code>.\nNumber of components a provided <code>ActionRow</code> is larger than …\nButton has both a custom ID and URL set.\nButton does not have the required field based on its style.\nMaximum <code>Component</code> label length in codepoints.\nMaximum number of root <code>Component</code>s in a message.\nMaximum length of a <code>Component</code> custom ID in codepoints.\nNumber of components provided is larger than the maximum.\nComponent custom ID is larger than the the maximum.\nComponent label is larger than the maximum.\nA provided <code>Component</code> is invalid.\nType of <code>ComponentValidationError</code> that occurred.\nProvided component cannot be a child component.\nProvided component cannot be a root component.\nMaximum number of <code>SelectMenuOption</code>s that can be chosen in a\nMinimum number of <code>SelectMenuOption</code>s that can be chosen in a\nMaximum number of <code>SelectMenuOption</code>s that must be chosen in …\nMaximum number of <code>SelectMenuOption</code>s in a <code>SelectMenu</code>.\nMaximum length of a <code>SelectMenuOption::description</code> in …\nMaximum length of a <code>SelectMenuOption::label</code> in codepoints.\nMaximum length of a <code>SelectMenuOption::value</code> in codepoints.\nMaximum length of a <code>SelectMenu::placeholder</code> in codepoints.\nMaximum number of items that can be chosen is smaller than …\nMinimum number of items that must be chosen is larger than …\nThe select menu specifies less default values than its own …\nNumber of select menu options provided is larger than the …\nDescription of a select menu option is larger than the …\nLabel of a select menu option is larger than the maximum.\nValue of a select menu option is larger than the maximum.\nThe <code>options</code> field is <code>None</code> for a text select menu.\nPlaceholder of a component is larger than the maximum.\nThe select menu specifies less default values than its own …\nThe select menu type doesn’t support the <code>default_values</code> …\nMaximum length of <code>TextInput::label</code>.\nMinimum length of <code>TextInput::label</code>.\nMaximum length of <code>TextInput::value</code>.\nMinimum length of <code>TextInput::value</code>.\nMaximum length of a <code>TextInput::placeholder</code> in codepoints.\n<code>TextInput::label</code> is invalid.\n<code>TextInput::max_length</code> is invalid.\n<code>TextInput::min_length</code> is too long.\nPlaceholder of a <code>TextInput</code> component is larger than …\nValue of a <code>TextInput</code> component is larger than …\nEnsure that an action row is correct.\nEnsure that a button is correct.\nEnsure that a top-level request component is correct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nImmutable reference to the type of error that occurred.\nEnsure that a select menu is correct.\nEnsure that a text input is correct.\nNumber of codepoints that were provided.\nNumber of codepoints that were provided.\nNumber of codepoints that were provided.\nNumber of codepoints that were provided.\nNumber of codepoints that were provided.\nNumber of codepoints that were provided.\nProvided number of codepoints.\nProvided number of codepoints.\nNumber of components within the action row.\nNumber of components that were provided.\nNumber of options that were provided.\nNumber of options that were provided.\nNumber of options that were provided.\nType of provided component.\nType of provided component.\nThe select menu’s type.\nProvided length.\nProvided length.\nProvided length.\nSelect menu’s maximum number of values.\nSelect menu’s minimum number of default values.\nNumber of default values provided.\nNumber of default values provided.\nStyle of the button.\nThe maximum embed author name length in codepoints.\nEmbed author’s name is larger than <code>AUTHOR_NAME_LENGTH</code>.\nThe maximum accepted color value.\nColor is larger than a valid RGB hexadecimal value.\nThe maximum embed description length in codepoints.\nEmbed description is larger than <code>DESCRIPTION_LENGTH</code>.\nThe maximum combined embed length in codepoints.\nCombined content of all embed fields is larger than …\nAn embed is not valid.\nType of <code>EmbedValidationError</code> that occurred.\nThe maximum number of fields in an embed.\nThe maximum length of an embed field name in codepoints.\nThe maximum length of an embed field value in codepoints.\nThe maximum embed footer length in codepoints.\nA field’s name is larger than <code>FIELD_NAME_LENGTH</code>.\nA field’s value is larger than <code>FIELD_VALUE_LENGTH</code>.\nFooter text is larger than <code>FOOTER_TEXT_LENGTH</code>.\nThe maximum embed title length in codepoints.\nTitle is larger than <code>TITLE_LENGTH</code>.\nThere are more than <code>FIELD_COUNT</code> number of fields in the …\nCalculate the total character count of an embed.\nEnsure an embed is correct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nImmutable reference to the type of error that occurred.\nProvided number of fields.\nProvided number of codepoints.\nProvided number of codepoints.\nProvided number of codepoints.\nProvided number of codepoints.\nProvided number of codepoints.\nProvided number of codepoints.\nProvided number of codepoints.\nProvided color hex value.\nMaximum length of an attachment’s description.\nAttachment description is too large.\nAttachment filename is not valid.\nToo many message components were provided.\nAn invalid message component was provided.\nReturned when the content is over 2000 UTF-16 characters.\nMaximum number of embeds that a message may have.\nReturned when the embed is invalid.\nMaximum length of message content.\nA message is not valid.\nType of <code>MessageValidationError</code> that occurred.\nMaximum amount of stickers.\nAmount of stickers provided is invalid.\nToo many embeds were provided.\nProvided webhook username was invalid.\nEnsure an attachment is correct.\nEnsure an attachment’s description is correct.\nEnsure an attachment’s description is correct.\nEnsure a list of components is correct.\nEnsure a message’s content is correct.\nEnsure a list of embeds is correct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>MessageValidationError</code> from a <code>ValidationError</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nImmutable reference to the type of error that occurred.\nEnsure that the amount of stickers in a message is correct.\nProvided number of codepoints.\nNumber of components that were provided.\nInvalid filename.\nIndex of the component.\nIndex of the embed.\nAdditional details about the validation failure type.\nAdditional details about the validation failure type.\nInvalid length.\nThe maximum audit log reason length in UTF-16 codepoints.\nMaximum length of an auto moderation block action’s …\nMaximum amount of seconds (<code>2_419_200</code> this is equivalent to …\nMaximum amount of exempt channels for the auto moderation …\nMaximum amount of exempt roles for the auto moderation …\nMaximum length of a allowed keyword.\nMaximum amount of allowed keywords when using the custom …\nMaximum length of a keyword in the keyword filter.\nMaximum amount of keywords allowed in the keyword filter.\nMaximum amount of mentions that triggers an auto …\nMaximum length of a keyword preset keyword.\nMaximum amount of allowed keywords when using a keyword …\nMaximum length of a regex pattern.\nMaximum amount of regex patterns that trigger the auto …\nProvided audit reason was too large.\nProvided seconds to disable communication was invalid.\nProvided block action custom message was too long.\nProvided exempt channels was invalid.\nProvided exempt roles was invalid.\nProvided keyword allow list was invalid.\nProvided allow list item was invalid.\nProvided keyword filter was invalid.\nProvided keyword was invalid.\nProvided limit was too large.\nProvided keyword preset allow list was invalid.\nProvided keyword preset allow list item was invalid.\nProvided regex patterns was invalid.\nProvided regex patterns item was invalid.\nMaximum amount of time a member can be timed out for.\nMaximum amount of seconds (<code>604_800</code> this is equivalent to <code>7</code> …\nProvided timestamp is too far in the future.\nProvided create guild ban delete message seconds was …\nMaximum amount of messages to get.\nMinimum amount of messages to get.\nMaximum amount of guilds to get.\nMinimum amount of guilds to get.\nMaximum amount of audit log entries to list.\nMinimum amount of audit log entries to list.\nMaximum amount of guild bans to list.\nMaximum amount of guild members to list.\nMinimum amount of guild members to list.\nMinimum amount of users to return when getting reactions.\nMaximum amount of users to return when getting reactions.\nMaximum length of a guild’s name.\nMinimum length of a guild’s name.\nMaximum amount of days to prune users from a guild.\nMinimum amount of days to prune users from a guild.\nProvided get channel messages limit was invalid.\nProvided get current user guilds limit was invalid.\nProvided get guild audit log limit was invalid.\nProvided get guild bans limit was invalid.\nProvided get guild members limit was invalid.\nProvided get reactions limit was invalid.\nProvided guild name was invalid.\nProvided guild prune days was invalid.\nMaximum length of an invite’s age, in seconds.\nMaximum uses of an invite, if not unlimited.\nProvided invite max age was invalid.\nProvided invite max uses was invalid.\nMaximum length of a maximum.\nMinimum length of a nickname.\nProvided nickname length was invalid.\nMaximum length of a scheduled event’s description.\nMinimum length of a scheduled event’s description.\nMaximum amount of scheduled event users to get.\nMinimum amount of scheduled event users to get.\nMaximum length of a scheduled event’s name.\nMinimum length of a scheduled event’s name.\nMaximum amount of guild members to search for.\nMinimum amount of guild members to search for.\nMaximum stage instance topic length.\nMinimum stage instance topic length.\nScheduled event description is invalid.\nScheduled event get users limit is invalid.\nScheduled event name is invalid.\nProvided search guild members limit was invalid.\nProvided stage instance topic was invalid.\nMaximum length of a guild template description.\nMaximum length of a guild template name.\nMinimum length of a guild template name.\nProvided guild template description was invalid.\nProvided guild template name was invalid.\nMaximum length of a username.\nMinimum length of a username.\nProvided username was invalid.\nA field is not valid.\nType of <code>ValidationError</code> that occurred.\nMaximum length of a webhook username.\nMinimum length of a webhook username.\nProvided webhook username was invalid.\nEnsure that an audit reason is correct.\nEnsure that the <code>duration_seconds</code> field for an auto …\nEnsure that an auto moderation block action’s …\nEnsure that the <code>exempt_channels</code> field for an auto …\nEnsure that the <code>exempt_roles</code> field for an auto moderation …\nEnsure that an auto moderation rule’s <code>allow_list</code> is …\nEnsure that an auto moderation rule’s <code>allow_list</code> item is …\nEnsure that an auto moderation rule’s <code>keyword_filter</code> is …\nEnsure that an auto moderation rule’s <code>keyword_filter</code> …\nEnsure that an auto moderation rule’s <code>mention_total_limit</code>…\nEnsure that an auto moderation rule’s <code>allow_list</code> is …\nEnsure that an auto moderation rule’s <code>allow_list</code> item is …\nEnsure that an auto moderation rule’s <code>regex_patterns</code> is …\nEnsure that an auto moderation rule’s <code>regex_patterns</code> …\nValidate that a timeout time is not too far in the future.\nEnsure that the delete message seconds amount for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnsure that the limit for the Get Channel Messages request …\nEnsure that the limit for the Get Current User Guilds …\nEnsure that the limit for the Get Guild Audit Log endpoint …\nEnsure that the limit for the Get Guild Bans endpoint is …\nEnsure that the limit for the Get Guild Members endpoint …\nEnsure that the limit for the Get Reactions endpoint is …\nEnsure that a guild name’s length is correct.\nEnsure that the days to prune members from a guild is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nEnsure that the invite max age is correct.\nEnsure that the invite max uses is correct.\nImmutable reference to the type of error that occurred.\nEnsure that the nickname length is correct.\nEnsure that a scheduled event’s description is correct.\nEnsure that a scheduled event’s get users limit amount …\nEnsure that a scheduled event’s name is correct.\nEnsure that the limit for the Search Guild Members …\nEnsure that the stage instance’s topic length is correct.\nEnsure that a guild template’s description length is …\nEnsure that a guild template’s name length is correct.\nEnsure that a username is correct.\nEnsure that a webhook is correct.\nInvalid days.\nInvalid length.\nInvalid limit.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid length.\nInvalid limit.\nInvalid limit.\nInvalid limit.\nInvalid limit.\nInvalid limit.\nInvalid limit.\nInvalid limit.\nInvalid limit.\nInvalid limit.\nInvalid age.\nInvalid age.\nInvalid seconds.\nInvalid seconds.\nInvalid substring.\nInvalid substring.\nInvalid substring.\nInvalid substring.\nInvalid substring.\nInvalid substring.\nInvalid timestamp.\nSticker’s description is invalid.\nSticker’s name is invalid.\nMaximum length of a sticker description.\nMinimum length of a sticker description.\nMaximum length of a sticker name.\nMinimum length of a sticker name.\nMaximum length of the sticker’s tags.\nMinimum length of the sticker’s tags.\nError created if validation of a sticker field fails.\nType of <code>StickerValidationError</code> that occurred.\nSticker’s tags are invalid.\nEnsure that a sticker’s description is correct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nImmutable reference to the type of error that occurred.\nEnsure that a sticker’s name is correct.\nEnsure that a sticker’s tags is correct.")