searchState.loadedDescShard("twilight_lavalink", 0, "twilight-lavalink\nClient to manage nodes and players.\nModels to deserialize responses into and functions to …\nModels to (de)serialize incoming/outgoing websocket events …\nNodes for communicating with a Lavalink server.\nPlayers containing information about active playing state …\nAn error that can occur while interacting with the client.\nType of <code>ClientError</code> that occurred.\nThe lavalink client that manages nodes, players, and …\nA node isn’t configured, so the operation isn’t …\nSending a voice update event to the node failed because …\nAdd a new node to be managed by the Lavalink client.\nDetermine the “best” node for new players according to …\nRemove a node from the list of nodes being managed by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nImmutable reference to the type of error that occurred.\nCreate a new Lavalink client instance.\nLike <code>new</code>, but allows you to specify resume capability (if …\nRetrieve a player for the guild.\nRetrieve an immutable reference to the player manager.\nProcess an event into the Lavalink client.\nRemove a node from the list of nodes being managed by the …\nA failing IP address within the planner.\nAn IPv4 block type.\nAn IPv6 block type.\nA block of IP addresses.\nThe IP version in use by the block.\nLoading the results failed.\nThe type of search result given.\nPossible track results for a query.\nA Nano IP route planner.\nInformation about a Nano IP route planner.\nInformation about a Nano IP planner.\nA Nano IP planner.\nThere were no matches.\nInformation about a playlist from a search result.\nA playlist was found.\nA Rotating IP route planner.\nInformation about a Rotating IP route planner.\nInformation about a Rotating IP planner.\nA Rotating IP planner.\nA Rotating Nano IP route planner.\nInformation about a Rotating Nano IP route planner.\nInformation about a Rotating Nano IP planner.\nA Rotating Nano IP planner.\nThe route planner in use.\nThe type of route planner in use.\nSome results were found.\nA track within a search result.\nAdditional information about a track, such as the author.\nA single track was found.\nThe IP address.\nThe name of the author, if provided.\nThe block IPs that are chosen.\nThe type of planner that is currently active.\nThe type of planner that is currently active.\nThe type of planner that is currently active.\nThe currently used IP address.\nThe active offset within the IP block.\nThe current IP address on rotation.\nThe details of the currently active Nano IP route planner.\nThe details of the currently active rotating IP route …\nThe details of the currently active rotating nano IP route …\nA list of IP addresses in the range that are failing.\nA list of IP addresses in the range that are failing.\nA list of IP addresses in the range that are failing.\nThe time that the address started failing as a timestamp.\nThe time that the address started failing in unix time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the configured route planner for a node by address.\nThe identifier of the source of the track.\nDetails about a track, such as the author and title.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe associated IP block.\nThe associated IP block.\nThe associated IP block.\nThe current offset used within the IP block.\nWhether the source is seekable.\nWhether the source is a stream.\nThe IP version of the IP block.\nThe length of the audio in milliseconds.\nGet a list of tracks that match an identifier.\nThe type of search result, such as a list of tracks or a …\nThe name of the playlist, if available.\nInformation about the playlist, if provided.\nThe position of the audio.\nThe number of rotations that have happened since the …\nThe selected track within the playlist, if available.\nThe size of the block’s addresses.\nThe title, if provided.\nThe base64 track string that you use in the <code>Play</code> event.\nThe list of tracks returned for the search query.\nUnmark an IP address as being failed, meaning that it can …\nThe source URI of the track.\nDestroy a player from a node.\nEqualize a player.\nMeta information about a track starting or ending.\nThe type of event that something is.\nPause a player.\nPlay a track.\nAn update about a player’s current track.\nSeek a player’s active track to a new position.\nUpdated statistics about a node.\nStop a player.\nA combined voice server and voice state update.\nSet the volume of a player.\nReturns the argument unchanged.\nEvents that Lavalink sends to clients.\nCalls <code>U::from(self)</code>.\nEvents that clients send to Lavalink.\nA track for a player ended.\nAn incoming event from a Lavalink node.\nAn update about the information of a player.\nAn update about the information of a player.\nNew statistics about a node and its host.\nA track for a player started.\nStatistics about a node and its host.\nNew statistics about a node and its host.\nCPU information about a node and its host.\nCPU information about a node and its host.\nMemory information about a node and its host.\nA track ended.\nA track ended.\nThe type of track event that was received.\nA track started.\nA track started.\nThe voice websocket connection was closed.\nThe voice websocket connection to Discord has been closed.\nThe voice websocket connection to Discord has been closed.\nThe number of bytes allocated.\nTrue if Discord closed the connection, false if Lavalink …\nDiscord websocket opcode that closed the connection.\nTrue when the player is connected to the voice gateway.\nThe number of CPU cores.\nCPU information about the node’s host.\nThe load of the system as a whole.\nStatistics about audio frames.\nThe number of bytes free.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe guild ID of the player.\nThe guild ID of the player.\nThe guild ID of the player.\nGuild ID of the associated player.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of track event.\nThe type of track event.\nType of track event.\nThe load of the Lavalink server.\nMemory information about the node’s host.\nThe load of the Lavalink server.\nThe opcode of the event.\nThe opcode of the event.\nThe opcode of the event.\nThe opcode of the event.\nLavalink websocket opcode of the event.\nThe current number of total players (active and not …\nThe current number of active players within the node.\nTrack position in milliseconds. None if not playing …\nThe reason that the track ended.\nReason the connection was closed.\nThe number of bytes reservable.\nThe number of CPU cores.\nThe new state of the player.\nThe load of the system as a whole.\nUnix timestamp of the player in milliseconds.\nThe base64 track that was affected.\nThe base64 track that was affected.\nThe uptime of the Lavalink server in seconds.\nThe number of bytes used.\nDestroy a player from a node.\nDestroy a player for a guild.\nEqualize a player.\nEqualize a player.\nA band of the equalizer event.\nAn outgoing event to send to Lavalink.\nPause or unpause a player.\nPause or unpause a player.\nPlay a track, optionally specifying to not skip the …\nPlay a track.\nSeek a player’s active track to a new position.\nSeek a player’s active track to a new position.\nStop a player.\nStop a player.\nA combined voice server and voice state update.\nA combined voice server and voice state update.\nSet the volume of a player.\nSet the volume of a player.\nThe band.\nThe bands to use as part of the equalizer.\nThe position in milliseconds to end the track.\nThe inner event being forwarded to a node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gain.\nThe guild ID of the player.\nThe guild ID of the player.\nThe guild ID of the player.\nThe guild ID of the player.\nThe guild ID of the player.\nThe guild ID of the player.\nThe guild ID of the player.\nThe guild ID of the player.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new destroy event.\nCreate a new equalizer event.\nCreate a new equalizer band.\nCreate a new pause event.\nCreate a new play event.\nCreate a new seek event.\nCreate a new stop event.\nCreate a new voice update event.\nCreate a new volume event.\nWhether or not to replace the currently playing track with …\nThe opcode of the event.\nThe opcode of the event.\nThe opcode of the event.\nThe opcode of the event.\nThe opcode of the event.\nThe opcode of the event.\nThe opcode of the event.\nThe opcode of the event.\nWhether to pause the player.\nThe position in milliseconds to seek to.\nThe session ID of the voice channel.\nThe position in milliseconds to start the track from.\nThe base64 track information.\nThe volume of the player from 0 to 1000. 100 is the …\nBuilding the HTTP request to initialize a connection …\nConnecting to the Lavalink server failed after several …\nStream of incoming events from a node.\nA connection to a single Lavalink server. It receives …\nThe configuration that a <code>Node</code> uses to connect to a …\nAn error occurred while either initializing a connection …\nType of <code>NodeError</code> that occurred.\nSend outgoing events to the associated node.\nAn error that can occur while sending an event over a node.\nType of <code>NodeSenderError</code> that occurred.\nConfiguration for a session which can be resumed.\nError occurred while sending over the channel.\nSerializing a JSON message to be sent to a Lavalink node …\nThe given authorization for the node is incorrect.\nThe address of the node.\nThe password to use when authenticating.\nCloses the receiving half of a channel without dropping it.\nRetrieve an immutable reference to the node’s …\nConnect to a node, providing a player manager so that the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nConsume the error, returning the source error if there is …\nReturns whether this channel is closed without needing a …\nImmutable reference to the type of error that occurred.\nImmutable reference to the type of error that occurred.\nCreate a new configuration for connecting to a node via …\nConfigure resume capability, providing the number of …\nRetrieve the calculated penalty score of the node.\nRetrieve an immutable reference to the player manager used …\nThe details for resuming a Lavalink session, if any.\nSends a message along this channel.\nRetrieve an immutable reference to the node’s …\nRetrieve a unique sender to send events to the Lavalink …\nRetrieve a copy of the node’s stats.\nThe number of seconds that the Lavalink server will allow …\nThe user ID of the bot.\nThe address of the node that failed to authorize.\nThe authorization used to connect to the node.\nThe message that couldn’t be serialized.\nA player for a guild connected to a node.\nRetrieve and create players for guilds.\nReturn the player’s channel ID.\nDestroy a player on the remote node and remove it from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an immutable reference to a player by guild ID.\nReturn a mutable reference to a player by guild ID or …\nReturn the player’s guild ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an immutable reference to the node linked to the …\nReturn whether the player is paused.\nReturn the player’s position.\nSend an event to the player’s node.\nReturn the player’s time.\nReturn the player’s volume.")